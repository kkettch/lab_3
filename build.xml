<project name="web_3" default="compile">

    <!-- использование файла параметров -->
    <property file="build.properties"/>

    <!-- импорт библиотек  -->
    <path id="libs.main.module">
        <fileset dir="libraries">
            <include name="*.jar"/>
        </fileset>
    </path>

    <!-- подключение ant-contrib для работы с дополнительными тегами -->
    <property name="ant-contrib.jar" location="libraries/ant-contrib-1.0b3.jar"/>
    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="${ant-contrib.jar}"/>
        </classpath>
    </taskdef>

    <!-- compile - компиляция исходных кодов проекта -->
    <target name="compile">

        <!-- создание директории и компиляция java-файлов -->
        <mkdir dir="${build.dir}/classes"/>

        <!-- includeantruntime="false" - не включаем библиотеки Ant Runtime в сборку для ускорения процесса компиляции -->
        <javac srcdir="${src.dir}/java" destdir="${build.dir}/classes" includeantruntime="false">
            <classpath>
                <path refid="libs.main.module"/>
            </classpath>
        </javac>

        <!-- добавляем resources и .html, .css файлы в target -->
        <copy todir="${build.dir}/classes">
            <fileset dir="${src.dir}/resources"/>
        </copy>

        <mkdir dir="${build.dir}/webapp"/>
        <copy todir="${build.dir}/webapp">
            <fileset dir="${src.dir}/webapp"/>
        </copy>
    </target>

    <!-- build - компиляция исходных кодов проекта и их упаковка в исполняемый jar-архив -->
    <target name="build" depends="compile">

        <!-- создание файла манифеста -->
        <manifest file="MANIFEST.MF">
            <attribute name="Main-Class" value="${mainClass}"/>
            <attribute name="package-Version" value="1.0"/>
        </manifest>

        <!-- сборка jar-архива -->
        <jar destfile="${build.dir}${jar.name}" basedir="${build.dir}/classes">
            <manifest>
                <attribute name="Main-Class" value="${mainClass}"/>
                <attribute name="package-Version" value="1.0"/>
            </manifest>
        </jar>
    </target>

    <!-- clean - удаление скомпилированных классов проекта и всех временных файлов (если они есть) -->
    <target name="clean">
        <delete dir="${build.dir}"/>
        <delete dir="${errors.dir}"/>
        <delete file="MANIFEST.MF"/>
        <delete dir="${alt.build}"/>
        <delete dir="${alt.src}"/>
        <delete dir="${team.dir}"/>
        <delete dir="${zip.dir}"/>
        <delete dir="${javadoc}"/>
    </target>

    <!-- test - запуск junit-тестов проекта -->
    <target name="test" depends="build">

        <!-- компиляция класса тестов -->
        <mkdir dir="${build.dir}/tests"/>
        <javac srcdir="${test.dir}/java" destdir="${build.dir}/tests" includeantruntime="false">
            <classpath>
                <path refid="libs.main.module"/>
                <pathelement location="${build.dir}/classes"/>
            </classpath>
        </javac>

        <!-- запуск тестов -->
        <mkdir dir="${errors.dir}"/>
        <!-- fork="true" - каждый тест запускается в отдельном процессе JVM для изоляции тестового окружения -->
        <!-- printsummary="on" - выводить результаты тестов после их выполнения -->
        <junit fork="true" printsummary="on">
            <formatter type="plain"/>
            <classpath>
                <path refid="libs.main.module"/>
                <pathelement location="${build.dir}/classes"/>
                <pathelement location="${build.dir}/tests"/>
            </classpath>
            <batchtest todir="${errors.dir}">
                <fileset dir="${test.dir}/java" includes="*.java"/>
            </batchtest>
        </junit>
    </target>

    <!-- music - воспроизведение музыки по завершению сборки (цель build) -->
    <target name="music">
        <sound>
            <success source="${music.dir}/success_2.wav" duration="3000"/>
            <fail source="${music.dir}/fail.wav" duration="5000"/>
        </sound>
        <runtarget target="build"/>
    </target>

    <!-- doc - добавление в MANIFEST.MF MD5 и SHA-1 файлов проекта, а также генерация и добавление в архив javadoc по всем классам проекта -->
    <target name="doc" depends="build">

        <!-- создание javadoc и добавление его в jar-архив -->
        <mkdir dir="javadoc/"/>
        <javadoc destdir="javadoc/">
            <classpath refid="libs.main.module"/>
            <fileset dir="${src.dir}" includes="**/*.java"/>
        </javadoc>

        <jar destfile="${build.dir}${jar.name}" update="true">
            <fileset dir="." includes="javadoc/"/>
        </jar>

        <!-- создание временного файла для создания чексумм -->
        <concat destfile="${temp.dir}/all_files.txt">
            <fileset dir="${src.dir}" includes="**/*.java"/>
            <fileset dir="${src.dir}" includes="**/*.html"/>
        </concat>

        <!-- подсчет чексумм -->
        <checksum algorithm="MD5" file="${temp.dir}/all_files.txt" property="md5"/>
        <checksum algorithm="SHA-1" file="${temp.dir}/all_files.txt" property="sha1"/>

        <!-- добавление значения чексумм в манифест -->
        <manifest file="MANIFEST.MF">
            <attribute name="MD5" value="${md5}"/>
            <attribute name="SHA1" value="${sha1}"/>
        </manifest>

        <!-- удаление временного файла -->
        <delete dir="${temp.dir}"/>

    </target>

    <!-- native2ascii - преобразование native2ascii для копий файлов локализации -->
    <target name="native2ascii">
        <native2ascii encoding="UTF-8" src="src/main/resources" includes="*.properties" dest="${build.dir}" />
    </target>

    <!-- xml - валидация всех xml-файлов в проекте -->
    <target name="xml">
        <xmlvalidate lenient="true">
            <fileset dir="${src.dir}">
                <include name="**/*.xml"/>
            </fileset>
        </xmlvalidate>
    </target>

    <!-- env - осуществляет сборку и запуск программы в альтернативных окружениях -->
    <target name="env" depends="build">
        <java jar="${build.dir}${jar.name}" fork="true">
            <jvmarg line="${jvm.params}"/>
        </java>
    </target>

    <!-- team - осуществляет получение из git-репозитория 4 предыдущих ревизий, их сборку (по аналогии с основной) и упаковку получившихся jar-файлов в zip-архив -->
    <target name="team">

        <!-- создание директории для jar-ревизий -->
        <mkdir dir="${team.dir}"/>

        <!-- получение хэша последнего коммита -->
        <exec executable="git" outputproperty="git.revision" failifexecutionfails="false" errorproperty="">
            <arg value="describe"/>
            <arg value="--tags"/>
            <arg value="--always"/>
            <arg value="HEAD"/>
        </exec>

        <!-- цикл для 4 ревизий -->
        <for list="0,1,2,3" param="revision">
            <sequential>

                <!-- получение хэша ревизии -->
                <exec executable="git">
                    <arg value="checkout"/>
                    <arg value="HEAD~@{revision}"/>
                </exec>

                <!-- сборка jar-ника и перенос его в каталог ${team.dir} для сохранения архивов ревизий -->
                <antcall target="build"/>
                <move file="${build.dir}${jar.name}" todir="${team.dir}"/>
                <move file="${team.dir}${jar.name}" tofile="${team.dir}/@{revision}.jar"/>
            </sequential>
        </for>

        <!-- переключение на главную ветку -->
        <exec executable="git" command="git checkout ${git.revision}"/>
        <exec executable="git" command="git switch master"/>

        <!-- упаковка ревизий в зип -->
        <zip destfile="zip-file/jars.zip" basedir="${team.dir}"/>
    </target>

    <!-- alt - создаёт альтернативную версию программы с измененными именами переменных и классов -->
    <target name="alt">

        <!-- альтернативный src и копирование в него программы -->
        <mkdir dir="${alt.src}"/>
        <copy todir="${alt.src.dir}">
            <fileset dir="${src.dir}"/>
        </copy>

        <!-- изменение названия класса PointBean.java на AltPointBean.java -->
        <replace dir="${alt.src.dir}/java" includes="**/*.java" propertyFile="build.properties">
            <replacefilter token="${class.name}" property="class.name.changed"/>
        </replace>

        <!-- изменние названия переменной generatedId на altGeneratedId -->
        <replaceregexp match="${var.name}" replace="${var.name.changed}">
            <fileset dir="${alt.src.dir}"/>
        </replaceregexp>

        <!-- вызов таргета build c передачей параметров альтернативных файлов -->
        <move file="${alt.src.dir}/java/${class.name}.java" tofile="${alt.src.dir}/java/${class.name.changed}.java"/>
        <antcall target="build" inheritRefs="true">
            <param name="src.dir" value="${alt.src.dir}"/>
            <param name="build.dir" value="${alt.build}"/>
            <param name="jar.name" value="alt${jar.name}"/>
        </antcall>

    </target>

    <!-- history - если проект не удаётся скомпилировать (цель compile), загружается предыдущая версия из репозитория git -->
    <target name="history">

        <!-- хэш первой ревизии (для будущего сравнения, что достигли первой ревизии) -->
        <exec executable="git" outputproperty="first_revision_hash">
            <arg line="rev-list --max-parents=0 HEAD"/>
        </exec>

        <!-- хэш самой последней ревизии -->
        <exec executable="git" outputproperty="git_base_revision">
            <arg line="rev-list -n 1 HEAD"/>
        </exec>

        <trycatch>
            <!-- попытка скомпилировать проект -->
            <try>
                <antcall target="compile"/>

                <!-- получаем хэш текущей ревизии если удалось скомпилировать -->
                <exec executable="git" outputproperty="git_current_revision">
                    <arg line="rev-parse HEAD"/>
                </exec>

                <!-- формируется diff между последней и текущей ревизией -->
                <echo message="run git diff ${git_base_revision}..${git_current_revision}"/>
                <exec executable="git">
                    <arg line="diff ${git_base_revision}..${git_current_revision}"/>
                </exec>
            </try>
            <catch>
                <!-- если не удалось скомпилировать то обрабатываем ошибку -->
                <echo message="Error compiling project"/>
                <!-- меняем ревизию на предыдущую -->
                <exec executable="git" outputproperty="git_revision">
                    <arg line="rev-parse HEAD^"/>
                </exec>
                <!-- если первая ревизия, то выводим сообщение, что пора останавливаться -->
                <if>
                    <equals arg1="${first_revision_hash}" arg2="${git_revision}"/>
                    <then>
                        <echo message="First revision reached / abort"/>
                    </then>
                    <!-- иначе меняем ревизию на предыдщую -->
                    <else>
                        <echo message="going down to the history... ${git_revision}"/>
                        <exec executable="git">
                            <arg line="checkout HEAD^"/>
                        </exec>
                        <!-- для новой ревизии запускаем снова ant history -->
                        <runtarget target="history"/>
                    </else>
                </if>
            </catch>
        </trycatch>
    </target>

</project>